"""
벨만 포드 알고리즘 : 비용이 음수인 간선이 있을 때 최단 경로를 구하는 법

- BOJ '타임머신' 문제 : https://www.acmicpc.net/problem/11657

- 모든 간선의 비용이 양수일 때는 다익스트라 최단 경로 알고리즘을 사용하면 됨

- 음수 간선이 포함되더라도 다익스트라 가능(순환이 없는 경우)

- 하지만 음수 간선의 순환이 포함된다면?
    - 이 경우 최단 거리가 음의 무한인 노드가 발생함

- 음수 간선에 관하여 최단 경로 문제는 다음과 같이 분류할 수 있음
    - 모든 간선이 양수인 경우
    - 음수 간선이 있는 경우
        - 음수 간선 순환은 없는 경우
        - 음수 간선 순환이 있는 경우

- 벨만 포드 최단 경로 알고리즘은 음의 간선이 포함된 상황에서도 사용할 수 있음
    - 또한 음수 간선의 순환을 감지할 수 있음
    - 벨만 포드의 기본 시간 복잡도는 O(VE)로 다익스트라 알고리즘(O(ElogV))에 비해 느림

- 단계
    1. 출발 노드 설정
    2. 최단 거리 테이블 초기화(무한)
    3. 다음의 과정을 N-1번 반복
        1. 전체 간선 E개를 하나씩 확인
        2. 각 간선을 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신

- 만약 음수 간선 순환이 발생하는지 체크하고 싶다면 3번의 과정을 한 번 더 수행함
    - 이때 최단 거리 테이블이 갱신된다면 음수 간선 순환이 존재하는 것

- 다익스트라 알고리즘 vs 벨만 포드 알고리즘
    - 다익스트라 알고리즘
        - 매번 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택
        - 음수 간선이 없다면 최적의 해를 찾을 수 있음
    - 벨만 포드 알고리즘
        - 매번 모든 간선을 전부 확인
            - 따라서 다익스트라 알고리즘에서의 최적의 해를 항상 포함함
        - 다익스트라 알고리즘에 비해서 시간이 오래 걸리지만 음수 간선 순환을 탐지할 수 있음

"""

import sys
input = sys.stdin.readline
INF = int(1e9)
n, m = map(int, input().split())
edges = []                              # 모든 간선에 대한 정보를 담는 리스트
dist = [INF] * (n+1)

for _ in range(m):
    a, b, c = map(int, input().split())
    edges.append((a, b, c))             # a노드에서 b노드로 가는 비용이 c

def bf(start):
    dist[start] = 0
    for i in range(n):
        for j in range(m):              # 매 반복마다 '모든 간선' 확인
            now = edges[j][0]
            next = edges[j][1]
            cost = edges[j][2]
            # 현재 간선을 거쳐서 다른 노드로 이동하는 거리가 더 짧은 경우
            if dist[now] != INF and dist[next] > dist[now] + cost:
                dist[next] = dist[now] + cost
                if i == n-1:            # n번째 라운드에서도 값이 갱신된다면 음수 순환이 존재한다는 것
                    return True
    return False

"""
입력 예제1

6 9
1 2 6
1 3 2
2 3 2
2 4 2
3 5 1
4 6 2
5 2 -2
5 4 3
5 6 4

-------------
입력 예제 2

6 9
1 2 6
1 3 2
2 3 2
2 4 2
3 5 1
4 6 2
5 2 -4
5 4 3
5 6 4

"""

cycle = bf(1)

if cycle:                               # 음수 순환이 있다면
    print("-1")
else:
    for i in range(1, n+1):
        if dist[i] == INF:              # 도달할 수 없는 경우
            print("-1")
        else:
            print(dist[i])